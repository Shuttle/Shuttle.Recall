<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddProjectionEventProcessorStartedException" xml:space="preserve">
    <value>Cannot add projections after the event processor has been started.</value>
  </data>
  <data name="AggregateConstructorException" xml:space="preserve">
    <value>Could not create an aggregate of type '{0}'.  Ensure that there is a constructor that takes only the `Guid` identifier as a parameter.</value>
    <comment>{0} = type of the aggregate</comment>
  </data>
  <data name="DefaultConstructorRequired" xml:space="preserve">
    <value>{0} '{1}' has no default constructor.</value>
    <comment>{0} = name of required instance, {1} = full type name</comment>
  </data>
  <data name="DuplicateAsyncEventHandlerEventTypeException" xml:space="preserve">
    <value>Async event handler '{0}' is already registered for event type '{1}'.</value>
    <comment>{0} = handler type full name, {1} = event type full name</comment>
  </data>
  <data name="DuplicateEventHandlerEventTypeException" xml:space="preserve">
    <value>Event handler '{0}' is already registered for event type '{1}'.</value>
    <comment>{0} = handler type full name, {1} = event type full name</comment>
  </data>
  <data name="DuplicateKeyException" xml:space="preserve">
    <value>Event stream with id '{0}' already has a key '{1}'.</value>
    <comment>0 = event stream id, 1 = key</comment>
  </data>
  <data name="DuplicateProjectionNameException" xml:space="preserve">
    <value>A projection with name '{0}' has already been added.</value>
    <comment>{0} = name of the projection</comment>
  </data>
  <data name="EventProcessorAddProjectionAsynchronousException" xml:space="preserve">
    <value>The event store options asynchronous value is 'true'.  Cannot add a synchronous projection.  Please call the `AddProjectionAsync()` method.</value>
  </data>
  <data name="EventProcessorAddProjectionSynchronousException" xml:space="preserve">
    <value>The event store options asynchronous value is 'false'.  Cannot add an asynchronous projection.  Please call the `AddProjection()` method.</value>
  </data>
  <data name="EventProcessorStartAsynchronousException" xml:space="preserve">
    <value>The event store options asynchronous value is 'true'.  Cannot start the event processor synchronously.  Please call the `StartAsync()` method.</value>
  </data>
  <data name="EventProcessorStartSynchronousException" xml:space="preserve">
    <value>The event store options asynchronous value is 'false'.  Cannot start the event processor asynchronously.  Please call the `Start()` method.</value>
  </data>
  <data name="EventStreamConcurrencyException" xml:space="preserve">
    <value>The event stream for id '{0}' already at version '{1}' and cannot insert the new event.  The event will be ignored and be added to the event stream again as a newer version.</value>
    <comment>{0} = event stream id, {1} = existing version</comment>
  </data>
  <data name="ExceptionInvalidProjectionRelease" xml:space="preserve">
    <value>Cannot release the projection since it either has not been assigned for processing or it has been assigned using another queue identifier.</value>
  </data>
  <data name="InformationProjectionActive" xml:space="preserve">
    <value>Projection '{0}' is active and will be processed by this endpoint.</value>
    <comment>{0} = projection name</comment>
  </data>
  <data name="InformationProjectionIgnored" xml:space="preserve">
    <value>Projection '{0}' is either not active or does not belong to this endpoint and will not be processed.</value>
    <comment>{0} = projection name</comment>
  </data>
  <data name="InvalidEventHandlerTypeExpection" xml:space="preserve">
    <value>Type '{0}' does not implement IEventHandler&lt;T&gt;.</value>
    <comment>{0} = full name of invalid type</comment>
  </data>
  <data name="InvalidEventOrderingException" xml:space="preserve">
    <value>Received primitive events from the IPrimitiveEventRepository implementation that were not sequential.  Version on next primitive event is '{0}' but currently on version '{1}'.</value>
    <comment>{0} = primitivate event version, {1} = next event version</comment>
  </data>
  <data name="MissingCompressionAlgorithmException" xml:space="preserve">
    <value>Compression algorithm '{0}' has not been registered.</value>
    <comment>{0} = algorithm name</comment>
  </data>
  <data name="MissingEncryptionAlgorithmException" xml:space="preserve">
    <value>Encryption algorithm '{0}' has not been registered.</value>
    <comment>{0} = algorithm name</comment>
  </data>
  <data name="MissingProjectionAggregationException" xml:space="preserve">
    <value>There is no projection aggregation registered with id '{0}'.</value>
    <comment>{0} = projection aggregation id</comment>
  </data>
  <data name="ModuleInstantiationException" xml:space="preserve">
    <value>Module could not be instantiated: {0}</value>
    <comment>{0} = full type name of module type to be instanced</comment>
  </data>
  <data name="NotImplementedPrimitiveEventQuery" xml:space="preserve">
    <value>No implementation of the `IPrimitiveEventQuery` has been registered.  Please register the implementation first by calling the `ServiceCollection.AddImplementationMethod()`, e.g. `ServiceCollection.AddSqlEventStorage(), before calling `ServiceCollection.AddEventStore()`.</value>
  </data>
  <data name="NotImplementedPrimitiveEventRepository" xml:space="preserve">
    <value>No implementation of the `IPrimitiveEventRepository` has been registered.  Please register the implementation first by calling the `ServiceCollection.AddImplementationMethod()`, e.g. `ServiceCollection.AddSqlEventStorage(), before calling `ServiceCollection.AddEventStore()`.</value>
  </data>
  <data name="NotImplementedProjectionRepository" xml:space="preserve">
    <value>No implementation of the `IProjectionRepository` has been registered.  Please register the implementation first by calling the `ServiceCollection.AddImplementationMethod()`, e.g. `ServiceCollection.AddSqlEventProcessing(), before calling `ServiceCollection.AddEventStore()`.</value>
  </data>
  <data name="NullResolverException" xml:space="preserve">
    <value>No `IComponentResolver` instance has been assigned to the configuration.</value>
  </data>
  <data name="ObserverInterfaceMissingException" xml:space="preserve">
    <value>Observer with type name '{0}' does not have an interface with name 'I{0}'.</value>
    <comment>{0} = observer type name</comment>
  </data>
  <data name="OpenSectionException" xml:space="preserve">
    <value>Could not find a section named '{0}' in configuration file '{1}' that is of type '{2}'.</value>
    <comment>{0} = section name, {1} = configuration file, {2} = the section type</comment>
  </data>
  <data name="ProcessEventMethodMissingException" xml:space="preserve">
    <value>Handler type '{0}' does not have the required ProcessEvent method that handles domain event type '{1}'.</value>
    <comment>{0} = handler full type name, {1} = domain event full type name</comment>
  </data>
  <data name="ProjectionAddEventHandlerAsynchronousException" xml:space="preserve">
    <value>The event store options asynchronous value is 'true'.  Cannot add a synchronous event handler.  Please call the `AddAsyncEventHandler()` method.</value>
  </data>
  <data name="ProjectionAddEventHandlerSynchronousException" xml:space="preserve">
    <value>The event store options asynchronous value is 'false'.  Cannot add an asynchronous event handler.  Please call the `AddEventHandler()` method.</value>
  </data>
  <data name="ProjectionAggregationAlreadyAssignedException" xml:space="preserve">
    <value>Projection '{0}' has already been assigned to an projectionAggregation.</value>
    <comment>{0} = projection name</comment>
  </data>
  <data name="ProjectionNotInAggregationException" xml:space="preserve">
    <value>Projection '{0}' is not contained in projectionAggregation with id '{1}'.</value>
    <comment>{0} = projection name, {1} = projectionAggregation id</comment>
  </data>
  <data name="ProjectionNotRegisteredException" xml:space="preserve">
    <value>Projection with name '{0}' has not been registered.  Call `IEventProcessor.AddProjection` before trying to get the projection.</value>
    <comment>{0} = projection name</comment>
  </data>
  <data name="SerializerUnknownTypeExcption" xml:space="preserve">
    <value>Type '{0}' is not registered with the serializer so it cannot be serialized.  Please use [SerialierInstance].EnqueueKnownType to add the type before attempting to serialize or deserialize a EventEnvelope containing this type in the object graph of the message property.</value>
    <comment>{0} = type name that is unknown.</comment>
  </data>
  <data name="TransactionAlreadyStartedException" xml:space="preserve">
    <value>Call to '{0}.{1}' already contains an active TransactionScope.</value>
    <comment>{0} = full type name, {1} = method name</comment>
  </data>
  <data name="UnhandledEventException" xml:space="preserve">
    <value>Instance of type '{0}' does not have a method named '{1}' that accepts event of type '{2}'.  Ensure that the accessibility is correct (private | public).</value>
    <comment>{0} = assembly qualified name of instance that event should be applied to, {1} = the method name that is expected, {2} = the assembly qualified name of the event</comment>
  </data>
  <data name="UnknownTypeException" xml:space="preserve">
    <value>Could not get type: {0}</value>
    <comment>{0} = type descriptor that cannot be found</comment>
  </data>
  <data name="VerboseTransactionScopeAmbient" xml:space="preserve">
    <value>TransactionScope ('{0}') using ambient transaction.</value>
    <comment>{0} = transaction scope name</comment>
  </data>
  <data name="VerboseTransactionScopeAmbientCompleted" xml:space="preserve">
    <value>TransactionScope ('{0}') using ambient transaction has completed.</value>
    <comment>{0} = transaction scope name</comment>
  </data>
  <data name="VerboseTransactionScopeCompleted" xml:space="preserve">
    <value>TransactionScope ('{0}') has completed.</value>
    <comment>{0} = transaction scope name</comment>
  </data>
  <data name="VerboseTransactionScopeCreated" xml:space="preserve">
    <value>TransactionScope ('{0}') created with isolation level '{1}' and timeout of '{2}'.</value>
    <comment>{0} = transaction scope name, {1} = isolation level, {2} = timeout</comment>
  </data>
  <data name="EventStreamCorrelationIdAlreadySetException" xml:space="preserve">
    <value>Event stream with id '{0}' already has a correlation id '{1}'.</value>
    <comment>0 = event stream id, 1 = correlation id</comment>
  </data>
  <data name="AsyncDelegateRequiredException" xml:space="preserve">
    <value>Mapped delegates have to be async.</value>
  </data>
  <data name="EventHandlerTypeException" xml:space="preserve">
    <value>The delegate must contain a parameter of type `IEventHandlerContext&lt;TMessage&gt;`.</value>
  </data>
</root>